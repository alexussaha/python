from fractions import Fraction #штука для работы с обычными функциями
from sympy import *            #Это нужно для производной
print('Введите функцию')
func = input()          #вводим функцию напр. х^2, tan(x), atan(x)
f = diff(func)          #ищем производную
#print(f) #убрать это "#" если захочешь посмотреть производную
print('Введите нижнюю границу интегрирования')
a = int(input())
print('Введите верхнюю границу интегрирования')
b = int(input())
print('введите точность')
eps = float(input()) 
eps = Fraction(eps) # переводим точность в обычную дробь
M = float(f.evalf(subs={'x':b}))  #подставляем в производную b
M1 = float(f.evalf(subs={'x':a})) #подставляем в производную a
M = abs(Fraction(M))              # переводим точность в обычную дробь
M1 = abs(Fraction(M1))            # переводим точность в обычную дробь
if M1 > M :        #находим max|M|
     M = M1
#print(M)      #убрать это "#" если захочешь посмотреть M
N = Fraction(M,eps)    # ищем на сколько частей нужно поделить отрезок для заданной точности N = M / eps
i = 1 # счетчик шага
s = 0 # сумма
func = func.replace('^', '**') # меняем '^' на '**' т.к. питон возводит в степеь знаком '**'
#print(func) #блаблабла
#print(N)  #вы про это уже поняли
while i <= N :             #функция суммы см. лекцию 1 умк 3
     x = Fraction(i,N)
     l = eval(func)       #это мы из записи функцию, которую ввели переводим в выражение и подставляем предыдущую строку
     s = s + l * Fraction(1,N)
     i = i+1
print(float(s))  # ну и выводим ответ     
